"use strict";exports.id=9605,exports.ids=[9605],exports.modules={7015:(e,t,r)=>{r.d(t,{c:()=>write});var n=r(12628),i=r(62928),l=r(54623);function write(e){var t={options:{directed:e.isDirected(),multigraph:e.isMultigraph(),compound:e.isCompound()},nodes:l.Z(e.nodes(),function(t){var r=e.node(t),i=e.parent(t),l={v:t};return n.Z(r)||(l.value=r),n.Z(i)||(l.parent=i),l}),edges:l.Z(e.edges(),function(t){var r=e.edge(t),i={v:t.v,w:t.w};return n.Z(t.name)||(i.name=t.name),n.Z(r)||(i.value=r),i})};return n.Z(e.graph())||(t.value=i.Z(e.graph())),t}r(10992)},89605:(e,t,r)=>{r.d(t,{r:()=>render});var n=r(49500),i=r(7015),l=r(4824),d=r(39222),a=r(60741),s=r(11082),o=r(85182);let c={},h={},g={},clear$1=()=>{h={},g={},c={}},isDescendant=(e,t)=>(d.l.trace("In isDescendant",t," ",e," = ",h[t].includes(e)),!!h[t].includes(e)),edgeInCluster=(e,t)=>(d.l.info("Descendants of ",t," is ",h[t]),d.l.info("Edge is ",e),e.v!==t&&e.w!==t&&(h[t]?h[t].includes(e.v)||isDescendant(e.v,t)||isDescendant(e.w,t)||h[t].includes(e.w):(d.l.debug("Tilt, ",t,",not in descendants"),!1))),copy=(e,t,r,n)=>{d.l.warn("Copying children of ",e,"root",n,"data",t.node(e),n);let i=t.children(e)||[];e!==n&&i.push(e),d.l.warn("Copying (nodes) clusterId",e,"nodes",i),i.forEach(i=>{if(t.children(i).length>0)copy(i,t,r,n);else{let l=t.node(i);d.l.info("cp ",i," to ",n," with parent ",e),r.setNode(i,l),n!==t.parent(i)&&(d.l.warn("Setting parent",i,t.parent(i)),r.setParent(i,t.parent(i))),e!==n&&i!==e?(d.l.debug("Setting parent",i,e),r.setParent(i,e)):(d.l.info("In copy ",e,"root",n,"data",t.node(e),n),d.l.debug("Not Setting parent for node=",i,"cluster!==rootId",e!==n,"node!==clusterId",i!==e));let a=t.edges(i);d.l.debug("Copying Edges",a),a.forEach(i=>{d.l.info("Edge",i);let l=t.edge(i.v,i.w,i.name);d.l.info("Edge data",l,n);try{edgeInCluster(i,n)?(d.l.info("Copying as ",i.v,i.w,l,i.name),r.setEdge(i.v,i.w,l,i.name),d.l.info("newGraph edges ",r.edges(),r.edge(r.edges()[0]))):d.l.info("Skipping copy of edge ",i.v,"-->",i.w," rootId: ",n," clusterId:",e)}catch(e){d.l.error(e)}})}d.l.debug("Removing node",i),t.removeNode(i)})},extractDescendants=(e,t)=>{let r=t.children(e),n=[...r];for(let i of r)g[i]=e,n=[...n,...extractDescendants(i,t)];return n},findNonClusterChild=(e,t)=>{d.l.trace("Searching",e);let r=t.children(e);if(d.l.trace("Searching children of id ",e,r),r.length<1)return d.l.trace("This is a valid node",e),e;for(let n of r){let r=findNonClusterChild(n,t);if(r)return d.l.trace("Found replacement for",e," => ",r),r}},getAnchorId=e=>c[e]&&c[e].externalConnections&&c[e]?c[e].id:e,adjustClustersAndEdges=(e,t)=>{if(!e||t>10){d.l.debug("Opting out, no graph ");return}for(let t of(d.l.debug("Opting in, graph "),e.nodes().forEach(function(t){let r=e.children(t);r.length>0&&(d.l.warn("Cluster identified",t," Replacement id in edges: ",findNonClusterChild(t,e)),h[t]=extractDescendants(t,e),c[t]={id:findNonClusterChild(t,e),clusterData:e.node(t)})}),e.nodes().forEach(function(t){let r=e.children(t),n=e.edges();r.length>0?(d.l.debug("Cluster identified",t,h),n.forEach(e=>{if(e.v!==t&&e.w!==t){let r=isDescendant(e.v,t),n=isDescendant(e.w,t);r^n&&(d.l.warn("Edge: ",e," leaves cluster ",t),d.l.warn("Descendants of XXX ",t,": ",h[t]),c[t].externalConnections=!0)}})):d.l.debug("Not a cluster ",t,h)}),Object.keys(c))){let r=c[t].id,n=e.parent(r);n!==t&&c[n]&&!c[n].externalConnections&&(c[t].id=n)}e.edges().forEach(function(t){let r=e.edge(t);d.l.warn("Edge "+t.v+" -> "+t.w+": "+JSON.stringify(t)),d.l.warn("Edge "+t.v+" -> "+t.w+": "+JSON.stringify(e.edge(t)));let n=t.v,i=t.w;if(d.l.warn("Fix XXX",c,"ids:",t.v,t.w,"Translating: ",c[t.v]," --- ",c[t.w]),c[t.v]&&c[t.w]&&c[t.v]===c[t.w]){d.l.warn("Fixing and trixing link to self - removing XXX",t.v,t.w,t.name),d.l.warn("Fixing and trixing - removing XXX",t.v,t.w,t.name),n=getAnchorId(t.v),i=getAnchorId(t.w),e.removeEdge(t.v,t.w,t.name);let l=t.w+"---"+t.v;e.setNode(l,{domId:l,id:l,labelStyle:"",labelText:r.label,padding:0,shape:"labelRect",style:""});let a=structuredClone(r),s=structuredClone(r);a.label="",a.arrowTypeEnd="none",s.label="",a.fromCluster=t.v,s.toCluster=t.v,e.setEdge(n,l,a,t.name+"-cyclic-special"),e.setEdge(l,i,s,t.name+"-cyclic-special")}else if(c[t.v]||c[t.w]){if(d.l.warn("Fixing and trixing - removing XXX",t.v,t.w,t.name),n=getAnchorId(t.v),i=getAnchorId(t.w),e.removeEdge(t.v,t.w,t.name),n!==t.v){let i=e.parent(n);c[i].externalConnections=!0,r.fromCluster=t.v}if(i!==t.w){let n=e.parent(i);c[n].externalConnections=!0,r.toCluster=t.w}d.l.warn("Fix Replacing with XXX",n,i,t.name),e.setEdge(n,i,r,t.name)}}),d.l.warn("Adjusted Graph",i.c(e)),extractor(e,0),d.l.trace(c)},extractor=(e,t)=>{if(d.l.warn("extractor - ",t,i.c(e),e.children("D")),t>10){d.l.error("Bailing out");return}let r=e.nodes(),n=!1;for(let t of r){let r=e.children(t);n=n||r.length>0}if(!n){d.l.debug("Done, no node has children",e.nodes());return}for(let n of(d.l.debug("Nodes = ",r,t),r))if(d.l.debug("Extracting node",n,c,c[n]&&!c[n].externalConnections,!e.parent(n),e.node(n),e.children("D")," Depth ",t),c[n]){if(!c[n].externalConnections&&e.children(n)&&e.children(n).length>0){d.l.warn("Cluster without external connections, without a parent and with children",n,t);let r=e.graph(),l="TB"===r.rankdir?"LR":"TB";c[n]&&c[n].clusterData&&c[n].clusterData.dir&&(l=c[n].clusterData.dir,d.l.warn("Fixing dir",c[n].clusterData.dir,l));let s=new a.k({multigraph:!0,compound:!0}).setGraph({rankdir:l,nodesep:50,ranksep:50,marginx:8,marginy:8}).setDefaultEdgeLabel(function(){return{}});d.l.warn("Old graph before copy",i.c(e)),copy(n,e,s,n),e.setNode(n,{clusterNode:!0,id:n,clusterData:c[n].clusterData,labelText:c[n].labelText,graph:s}),d.l.warn("New graph after copy node: (",n,")",i.c(s)),d.l.debug("Old graph after copy",i.c(e))}else d.l.warn("Cluster ** ",n," **not meeting the criteria !externalConnections:",!c[n].externalConnections," no parent: ",!e.parent(n)," children ",e.children(n)&&e.children(n).length>0,e.children("D"),t),d.l.debug(c)}else d.l.debug("Not a cluster",n,t);for(let n of(r=e.nodes(),d.l.warn("New list of nodes",r),r)){let r=e.node(n);d.l.warn(" Now next level",n,r),r.clusterNode&&extractor(r.graph,t+1)}},sorter=(e,t)=>{if(0===t.length)return[];let r=Object.assign(t);return t.forEach(t=>{let n=e.children(t),i=sorter(e,n);r=[...r,...i]}),r},sortNodesByHierarchy=e=>sorter(e,e.children()),f={rect:(e,t)=>{d.l.info("Creating subgraph rect for ",t.id,t);let r=(0,d.c)(),n=e.insert("g").attr("class","cluster"+(t.class?" "+t.class:"")).attr("id",t.id),i=n.insert("rect",":first-child"),a=(0,d.m)(r.flowchart.htmlLabels),c=n.insert("g").attr("class","cluster-label"),h="markdown"===t.labelType?(0,s.a)(c,t.labelText,{style:t.labelStyle,useHtmlLabels:a}):c.node().appendChild((0,l.c)(t.labelText,t.labelStyle,void 0,!0)),g=h.getBBox();if((0,d.m)(r.flowchart.htmlLabels)){let e=h.children[0],t=(0,o.Ys)(h);g=e.getBoundingClientRect(),t.attr("width",g.width),t.attr("height",g.height)}let f=0*t.padding,u=f/2,w=t.width<=g.width+f?g.width+f:t.width;t.width<=g.width+f?t.diff=(g.width-t.width)/2-t.padding/2:t.diff=-t.padding/2,d.l.trace("Data ",t,JSON.stringify(t)),i.attr("style",t.style).attr("rx",t.rx).attr("ry",t.ry).attr("x",t.x-w/2).attr("y",t.y-t.height/2-u).attr("width",w).attr("height",t.height+f);let{subGraphTitleTopMargin:p}=(0,l.g)(r);a?c.attr("transform",`translate(${t.x-g.width/2}, ${t.y-t.height/2+p})`):c.attr("transform",`translate(${t.x}, ${t.y-t.height/2+p})`);let v=i.node().getBBox();return t.width=v.width,t.height=v.height,t.intersect=function(e){return(0,l.i)(t,e)},n},roundedWithTitle:(e,t)=>{let r=(0,d.c)(),n=e.insert("g").attr("class",t.classes).attr("id",t.id),i=n.insert("rect",":first-child"),a=n.insert("g").attr("class","cluster-label"),s=n.append("rect"),c=a.node().appendChild((0,l.c)(t.labelText,t.labelStyle,void 0,!0)),h=c.getBBox();if((0,d.m)(r.flowchart.htmlLabels)){let e=c.children[0],t=(0,o.Ys)(c);h=e.getBoundingClientRect(),t.attr("width",h.width),t.attr("height",h.height)}h=c.getBBox();let g=0*t.padding,f=g/2,u=t.width<=h.width+t.padding?h.width+t.padding:t.width;t.width<=h.width+t.padding?t.diff=(h.width+0*t.padding-t.width)/2:t.diff=-t.padding/2,i.attr("class","outer").attr("x",t.x-u/2-f).attr("y",t.y-t.height/2-f).attr("width",u+g).attr("height",t.height+g),s.attr("class","inner").attr("x",t.x-u/2-f).attr("y",t.y-t.height/2-f+h.height-1).attr("width",u+g).attr("height",t.height+g-h.height-3);let{subGraphTitleTopMargin:w}=(0,l.g)(r);a.attr("transform",`translate(${t.x-h.width/2}, ${t.y-t.height/2-t.padding/3+((0,d.m)(r.flowchart.htmlLabels)?5:3)+w})`);let p=i.node().getBBox();return t.height=p.height,t.intersect=function(e){return(0,l.i)(t,e)},n},noteGroup:(e,t)=>{let r=e.insert("g").attr("class","note-cluster").attr("id",t.id),n=r.insert("rect",":first-child"),i=0*t.padding,d=i/2;n.attr("rx",t.rx).attr("ry",t.ry).attr("x",t.x-t.width/2-d).attr("y",t.y-t.height/2-d).attr("width",t.width+i).attr("height",t.height+i).attr("fill","none");let a=n.node().getBBox();return t.width=a.width,t.height=a.height,t.intersect=function(e){return(0,l.i)(t,e)},r},divider:(e,t)=>{let r=e.insert("g").attr("class",t.classes).attr("id",t.id),n=r.insert("rect",":first-child"),i=0*t.padding,d=i/2;n.attr("class","divider").attr("x",t.x-t.width/2-d).attr("y",t.y-t.height/2).attr("width",t.width+i).attr("height",t.height+i);let a=n.node().getBBox();return t.width=a.width,t.height=a.height,t.diff=-t.padding/2,t.intersect=function(e){return(0,l.i)(t,e)},r}},u={},insertCluster=(e,t)=>{d.l.trace("Inserting cluster");let r=t.shape||"rect";u[t.id]=f[r](e,t)},clear=()=>{u={}},recursiveRender=async(e,t,r,a,s,o)=>{d.l.info("Graph in recursive render: XXX",i.c(t),s);let h=t.graph().rankdir;d.l.trace("Dir in recursive render - dir:",h);let g=e.insert("g").attr("class","root");t.nodes()?d.l.info("Recursive render XXX",t.nodes()):d.l.info("No nodes found for",t),t.edges().length>0&&d.l.trace("Recursive edges",t.edge(t.edges()[0]));let f=g.insert("g").attr("class","clusters"),u=g.insert("g").attr("class","edgePaths"),w=g.insert("g").attr("class","edgeLabels"),p=g.insert("g").attr("class","nodes");await Promise.all(t.nodes().map(async function(e){let n=t.node(e);if(void 0!==s){let r=JSON.parse(JSON.stringify(s.clusterData));d.l.info("Setting data for cluster XXX (",e,") ",r,s),t.setNode(s.id,r),t.parent(e)||(d.l.trace("Setting parent",e,s.id),t.setParent(e,s.id,r))}if(d.l.info("(Insert) Node XXX"+e+": "+JSON.stringify(t.node(e))),n&&n.clusterNode){d.l.info("Cluster identified",e,n.width,t.node(e));let i=await recursiveRender(p,n.graph,r,a,t.node(e),o),s=i.elem;(0,l.u)(n,s),n.diff=i.diff||0,d.l.info("Node bounds (abc123)",e,n,n.width,n.x,n.y),(0,l.s)(s,n),d.l.warn("Recursive render complete ",s,n)}else t.children(e).length>0?(d.l.info("Cluster - the non recursive path XXX",e,n.id,n,t),d.l.info(findNonClusterChild(n.id,t)),c[n.id]={id:findNonClusterChild(n.id,t),node:n}):(d.l.info("Node - the non recursive path",e,n.id,n),await (0,l.e)(p,t.node(e),h))})),t.edges().forEach(function(e){let r=t.edge(e.v,e.w,e.name);d.l.info("Edge "+e.v+" -> "+e.w+": "+JSON.stringify(e)),d.l.info("Edge "+e.v+" -> "+e.w+": ",e," ",JSON.stringify(t.edge(e))),d.l.info("Fix",c,"ids:",e.v,e.w,"Translating: ",c[e.v],c[e.w]),(0,l.f)(w,r)}),t.edges().forEach(function(e){d.l.info("Edge "+e.v+" -> "+e.w+": "+JSON.stringify(e))}),d.l.info("#############################################"),d.l.info("###                Layout                 ###"),d.l.info("#############################################"),d.l.info(t),(0,n.bK)(t),d.l.info("Graph after layout:",i.c(t));let v=0,{subGraphTitleTotalMargin:y}=(0,l.g)(o);return sortNodesByHierarchy(t).forEach(function(e){let r=t.node(e);d.l.info("Position "+e+": "+JSON.stringify(t.node(e))),d.l.info("Position "+e+": ("+r.x,","+r.y,") width: ",r.width," height: ",r.height),r&&r.clusterNode?(r.y+=y,(0,l.p)(r)):t.children(e).length>0?(r.height+=y,insertCluster(f,r),c[r.id].node=r):(r.y+=y/2,(0,l.p)(r))}),t.edges().forEach(function(e){let n=t.edge(e);d.l.info("Edge "+e.v+" -> "+e.w+": "+JSON.stringify(n),n),n.points.forEach(e=>e.y+=y/2);let i=(0,l.h)(u,e,n,c,r,t,a);(0,l.j)(n,i)}),t.nodes().forEach(function(e){let r=t.node(e);d.l.info(e,r.type,r.diff),"group"===r.type&&(v=r.diff)}),{elem:g,diff:v}},render=async(e,t,r,n,a)=>{(0,l.a)(e,r,n,a),(0,l.b)(),(0,l.d)(),clear(),clear$1(),d.l.warn("Graph at first:",JSON.stringify(i.c(t))),adjustClustersAndEdges(t),d.l.warn("Graph after:",JSON.stringify(i.c(t)));let s=(0,d.c)();await recursiveRender(e,t,n,a,void 0,s)}}};